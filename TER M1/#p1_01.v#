Require Import notations.
Require Import option.
Require Import String.

Import ListNotations.
Local Open Scope list_scope.

Fixpoint last {A:Type}(l:list A): option :=
    match l with
    | nil => None
    | x :: nil => Some x
    | x :: y => last y
    end. 

Fixpoint last_but_one {A:Type}(l:list A): option :=
    match l with
    | nil => None
    | x :: y :: nil => Some x
    | x :: y => last_but_one y
    end.

(* en commencant la notation à 0 *)
Fixpoint element_at {A:Type}(l:list A)(n: nat): option :=
    match n, l with
    | _, nil => None
    | O, x :: y => Some x
    | S n', x :: y => element_at y n'
    end.

(* en commencant la notation à 1 *)
Fixpoint element_at_bis {A:Type}(l:list A)(n: nat): option :=
    match n, l with
    | _, nil => None
    | O, _ => None
    | S O, x :: y => Some x
    | S n', x :: y => element_at y n'
    end.

Open Scope string_scope.
Eval compute in last ["a","b","c","d"].
Eval compute in last_but_one ["a","b","c","d"].
Eval compute in element_at ["a","b","c","d"] 3.
Eval compute in element_at_bis ["a","b","c","d"] 2.


